import { useState } from 'react'
import { X, Filter } from 'lucide-react'

import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Checkbox } from '@/components/ui/checkbox'
import { Label } from '@/components/ui/label'
import { Separator } from '@/components/ui/separator'

import type { VulnerabilityItem } from '@/hooks/use-vulnerability-data'

interface VulnerabilityFiltersProps {
  filters: {
    severity: string[]
    type: string[]
    status: string[]
  }
  onFiltersChange: (filters: {
    severity: string[]
    type: string[]
    status: string[]
  }) => void
  vulnerabilities: VulnerabilityItem[]
}

export function VulnerabilityFilters({ 
  filters, 
  onFiltersChange, 
  vulnerabilities 
}: VulnerabilityFiltersProps) {
  // Get unique values for filter options
  const severityOptions = ['critical', 'high', 'medium', 'low']
  const typeOptions = [...new Set(vulnerabilities.map(v => v.type))].sort()
  const statusOptions = ['open', 'in-progress', 'fixed', 'dismissed']

  // Get counts for each filter option
  const getSeverityCounts = () => {
    return severityOptions.map(severity => ({
      value: severity,
      count: vulnerabilities.filter(v => v.severity === severity).length
    }))
  }

  const getTypeCounts = () => {
    return typeOptions.map(type => ({
      value: type,
      count: vulnerabilities.filter(v => v.type === type).length
    }))
  }

  const getStatusCounts = () => {
    return statusOptions.map(status => ({
      value: status,
      count: vulnerabilities.filter(v => v.status === status).length
    }))
  }

  const handleSeverityChange = (severity: string, checked: boolean) => {
    const newSeverity = checked
      ? [...filters.severity, severity]
      : filters.severity.filter(s => s !== severity)
    
    onFiltersChange({
      ...filters,
      severity: newSeverity
    })
  }

  const handleTypeChange = (type: string, checked: boolean) => {
    const newType = checked
      ? [...filters.type, type]
      : filters.type.filter(t => t !== type)
    
    onFiltersChange({
      ...filters,
      type: newType
    })
  }

  const handleStatusChange = (status: string, checked: boolean) => {
    const newStatus = checked
      ? [...filters.status, status]
      : filters.status.filter(s => s !== status)
    
    onFiltersChange({
      ...filters,
      status: newStatus
    })
  }

  const clearAllFilters = () => {
    onFiltersChange({
      severity: [],
      type: [],
      status: []
    })
  }

  const hasActiveFilters = filters.severity.length > 0 || 
                          filters.type.length > 0 || 
                          filters.status.length > 0

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case 'critical':
        return 'bg-red-100 text-red-800 border-red-200'
      case 'high':
        return 'bg-orange-100 text-orange-800 border-orange-200'
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      case 'low':
        return 'bg-blue-100 text-blue-800 border-blue-200'
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'open':
        return 'bg-red-100 text-red-800 border-red-200'
      case 'in-progress':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      case 'fixed':
        return 'bg-green-100 text-green-800 border-green-200'
      case 'dismissed':
        return 'bg-gray-100 text-gray-800 border-gray-200'
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const formatType = (type: string) => {
    return type.split('-').map(word => 
      word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ')
  }

  const formatStatus = (status: string) => {
    return status.split('-').map(word => 
      word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ')
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <Filter className="h-4 w-4" />
            <CardTitle className="text-lg">Filters</CardTitle>
            {hasActiveFilters && (
              <Badge variant="secondary">
                {filters.severity.length + filters.type.length + filters.status.length} active
              </Badge>
            )}
          </div>
          {hasActiveFilters && (
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={clearAllFilters}
              className="text-muted-foreground hover:text-foreground"
            >
              <X className="h-4 w-4 mr-1" />
              Clear All
            </Button>
          )}
        </div>
      </CardHeader>
      <CardContent>
        <div className="grid gap-6 md:grid-cols-3">
          {/* Severity Filter */}
          <div>
            <Label className="text-sm font-medium mb-3 block">Severity</Label>
            <div className="space-y-2">
              {getSeverityCounts().map(({ value, count }) => (
                <div key={value} className="flex items-center space-x-2">
                  <Checkbox
                    id={`severity-${value}`}
                    checked={filters.severity.includes(value)}
                    onCheckedChange={(checked) => 
                      handleSeverityChange(value, checked as boolean)
                    }
                  />
                  <Label 
                    htmlFor={`severity-${value}`}
                    className="flex items-center space-x-2 cursor-pointer flex-1"
                  >
                    <Badge 
                      variant="outline" 
                      className={`text-xs ${getSeverityColor(value)}`}
                    >
                      {value.charAt(0).toUpperCase() + value.slice(1)}
                    </Badge>
                    <span className="text-sm text-muted-foreground">({count})</span>
                  </Label>
                </div>
              ))}
            </div>
          </div>

          {/* Type Filter */}
          <div>
            <Label className="text-sm font-medium mb-3 block">Type</Label>
            <div className="space-y-2 max-h-40 overflow-y-auto">
              {getTypeCounts().map(({ value, count }) => (
                <div key={value} className="flex items-center space-x-2">
                  <Checkbox
                    id={`type-${value}`}
                    checked={filters.type.includes(value)}
                    onCheckedChange={(checked) => 
                      handleTypeChange(value, checked as boolean)
                    }
                  />
                  <Label 
                    htmlFor={`type-${value}`}
                    className="flex items-center space-x-2 cursor-pointer flex-1"
                  >
                    <span className="text-sm">{formatType(value)}</span>
                    <span className="text-sm text-muted-foreground">({count})</span>
                  </Label>
                </div>
              ))}
            </div>
          </div>

          {/* Status Filter */}
          <div>
            <Label className="text-sm font-medium mb-3 block">Status</Label>
            <div className="space-y-2">
              {getStatusCounts().map(({ value, count }) => (
                <div key={value} className="flex items-center space-x-2">
                  <Checkbox
                    id={`status-${value}`}
                    checked={filters.status.includes(value)}
                    onCheckedChange={(checked) => 
                      handleStatusChange(value, checked as boolean)
                    }
                  />
                  <Label 
                    htmlFor={`status-${value}`}
                    className="flex items-center space-x-2 cursor-pointer flex-1"
                  >
                    <Badge 
                      variant="outline" 
                      className={`text-xs ${getStatusColor(value)}`}
                    >
                      {formatStatus(value)}
                    </Badge>
                    <span className="text-sm text-muted-foreground">({count})</span>
                  </Label>
                </div>
              ))}
            </div>
          </div>
        </div>

        {/* Active Filters Summary */}
        {hasActiveFilters && (
          <>
            <Separator className="my-4" />
            <div>
              <Label className="text-sm font-medium mb-2 block">Active Filters</Label>
              <div className="flex flex-wrap gap-2">
                {filters.severity.map(severity => (
                  <Badge 
                    key={`active-severity-${severity}`}
                    variant="secondary"
                    className={getSeverityColor(severity)}
                  >
                    {severity.charAt(0).toUpperCase() + severity.slice(1)}
                    <X 
                      className="h-3 w-3 ml-1 cursor-pointer" 
                      onClick={() => handleSeverityChange(severity, false)}
                    />
                  </Badge>
                ))}
                {filters.type.map(type => (
                  <Badge 
                    key={`active-type-${type}`}
                    variant="secondary"
                  >
                    {formatType(type)}
                    <X 
                      className="h-3 w-3 ml-1 cursor-pointer" 
                      onClick={() => handleTypeChange(type, false)}
                    />
                  </Badge>
                ))}
                {filters.status.map(status => (
                  <Badge 
                    key={`active-status-${status}`}
                    variant="secondary"
                    className={getStatusColor(status)}
                  >
                    {formatStatus(status)}
                    <X 
                      className="h-3 w-3 ml-1 cursor-pointer" 
                      onClick={() => handleStatusChange(status, false)}
                    />
                  </Badge>
                ))}
              </div>
            </div>
          </>
        )}
      </CardContent>
    </Card>
  )
}
