import { useState } from 'react'
import { motion } from 'framer-motion'
import { 
  RefreshCw, 
  AlertTriangle, 
  ChevronDown, 
  ChevronUp,
  ArrowUpDown,
  Search
} from 'lucide-react'

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Button } from '@/components/ui/button'
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'
import { VulnerabilityCard } from './vulnerability-card'

import type { VulnerabilityItem } from '@/hooks/use-vulnerability-data'

interface VulnerabilityListProps {
  vulnerabilities: VulnerabilityItem[]
  loading: boolean
  error: string | null
  onVulnerabilityClick: (vulnerability: VulnerabilityItem) => void
}

type SortField = 'severity' | 'discoveredAt' | 'title' | 'cvssScore' | 'status'
type SortDirection = 'asc' | 'desc'

export function VulnerabilityList({ 
  vulnerabilities, 
  loading, 
  error, 
  onVulnerabilityClick 
}: VulnerabilityListProps) {
  const [sortField, setSortField] = useState<SortField>('severity')
  const [sortDirection, setSortDirection] = useState<SortDirection>('desc')
  const [currentPage, setCurrentPage] = useState(1)
  const [itemsPerPage, setItemsPerPage] = useState(10)

  // Sort vulnerabilities
  const sortedVulnerabilities = [...vulnerabilities].sort((a, b) => {
    let aValue: any
    let bValue: any

    switch (sortField) {
      case 'severity':
        const severityOrder = { critical: 4, high: 3, medium: 2, low: 1 }
        aValue = severityOrder[a.severity]
        bValue = severityOrder[b.severity]
        break
      case 'discoveredAt':
        aValue = a.discoveredAt.getTime()
        bValue = b.discoveredAt.getTime()
        break
      case 'title':
        aValue = a.title.toLowerCase()
        bValue = b.title.toLowerCase()
        break
      case 'cvssScore':
        aValue = a.cvssScore || 0
        bValue = b.cvssScore || 0
        break
      case 'status':
        const statusOrder = { open: 4, 'in-progress': 3, fixed: 2, dismissed: 1 }
        aValue = statusOrder[a.status]
        bValue = statusOrder[b.status]
        break
      default:
        aValue = a.discoveredAt.getTime()
        bValue = b.discoveredAt.getTime()
    }

    if (sortDirection === 'asc') {
      return aValue > bValue ? 1 : aValue < bValue ? -1 : 0
    } else {
      return aValue < bValue ? 1 : aValue > bValue ? -1 : 0
    }
  })

  // Pagination
  const totalPages = Math.ceil(sortedVulnerabilities.length / itemsPerPage)
  const startIndex = (currentPage - 1) * itemsPerPage
  const endIndex = startIndex + itemsPerPage
  const paginatedVulnerabilities = sortedVulnerabilities.slice(startIndex, endIndex)

  const handleSort = (field: SortField) => {
    if (sortField === field) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')
    } else {
      setSortField(field)
      setSortDirection('desc')
    }
    setCurrentPage(1) // Reset to first page when sorting
  }

  const getSortIcon = (field: SortField) => {
    if (sortField !== field) {
      return <ArrowUpDown className="h-4 w-4 text-muted-foreground" />
    }
    return sortDirection === 'asc' 
      ? <ChevronUp className="h-4 w-4" />
      : <ChevronDown className="h-4 w-4" />
  }

  const getSeverityStats = () => {
    const stats = vulnerabilities.reduce((acc, vuln) => {
      acc[vuln.severity] = (acc[vuln.severity] || 0) + 1
      return acc
    }, {} as Record<string, number>)

    return {
      critical: stats.critical || 0,
      high: stats.high || 0,
      medium: stats.medium || 0,
      low: stats.low || 0,
    }
  }

  const severityStats = getSeverityStats()

  if (loading) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Vulnerabilities</CardTitle>
          <CardDescription>Loading vulnerability data...</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center py-8">
            <RefreshCw className="h-8 w-8 animate-spin text-muted-foreground" />
          </div>
        </CardContent>
      </Card>
    )
  }

  if (error) {
    return (
      <Card>
        <CardHeader>
          <CardTitle>Vulnerabilities</CardTitle>
          <CardDescription>Error loading vulnerability data</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col items-center justify-center py-8 text-center">
            <AlertTriangle className="h-8 w-8 text-destructive mb-2" />
            <p className="text-muted-foreground">{error}</p>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center justify-between">
          <div>
            <CardTitle>Vulnerabilities</CardTitle>
            <CardDescription>
              {vulnerabilities.length} vulnerabilities found
              {severityStats.critical > 0 && (
                <span className="ml-2 text-red-600 font-medium">
                  • {severityStats.critical} critical
                </span>
              )}
              {severityStats.high > 0 && (
                <span className="ml-2 text-orange-600 font-medium">
                  • {severityStats.high} high
                </span>
              )}
            </CardDescription>
          </div>
          
          {/* Sort Controls */}
          <div className="flex items-center space-x-2">
            <Select value={sortField} onValueChange={(value) => handleSort(value as SortField)}>
              <SelectTrigger className="w-40">
                <SelectValue placeholder="Sort by..." />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="severity">Severity</SelectItem>
                <SelectItem value="discoveredAt">Discovery Date</SelectItem>
                <SelectItem value="title">Title</SelectItem>
                <SelectItem value="cvssScore">CVSS Score</SelectItem>
                <SelectItem value="status">Status</SelectItem>
              </SelectContent>
            </Select>
            
            <Button
              variant="outline"
              size="sm"
              onClick={() => setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')}
            >
              {getSortIcon(sortField)}
            </Button>
          </div>
        </div>
      </CardHeader>
      
      <CardContent>
        {sortedVulnerabilities.length === 0 ? (
          <div className="text-center py-8">
            <Search className="h-8 w-8 text-muted-foreground mx-auto mb-2" />
            <p className="text-muted-foreground">No vulnerabilities found</p>
            <p className="text-sm text-muted-foreground mt-1">
              Try adjusting your search or filter criteria
            </p>
          </div>
        ) : (
          <>
            {/* Vulnerability Cards */}
            <div className="space-y-4">
              {paginatedVulnerabilities.map((vulnerability, index) => (
                <VulnerabilityCard
                  key={vulnerability.id}
                  vulnerability={vulnerability}
                  onClick={onVulnerabilityClick}
                  index={index}
                />
              ))}
            </div>

            {/* Pagination */}
            {totalPages > 1 && (
              <div className="flex items-center justify-between mt-6 pt-4 border-t">
                <div className="flex items-center space-x-2">
                  <span className="text-sm text-muted-foreground">
                    Showing {startIndex + 1}-{Math.min(endIndex, sortedVulnerabilities.length)} of {sortedVulnerabilities.length}
                  </span>
                  <Select 
                    value={itemsPerPage.toString()} 
                    onValueChange={(value) => {
                      setItemsPerPage(parseInt(value))
                      setCurrentPage(1)
                    }}
                  >
                    <SelectTrigger className="w-20">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="5">5</SelectItem>
                      <SelectItem value="10">10</SelectItem>
                      <SelectItem value="20">20</SelectItem>
                      <SelectItem value="50">50</SelectItem>
                    </SelectContent>
                  </Select>
                  <span className="text-sm text-muted-foreground">per page</span>
                </div>

                <div className="flex items-center space-x-2">
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                    disabled={currentPage === 1}
                  >
                    Previous
                  </Button>
                  
                  <div className="flex items-center space-x-1">
                    {Array.from({ length: Math.min(5, totalPages) }, (_, i) => {
                      let pageNum
                      if (totalPages <= 5) {
                        pageNum = i + 1
                      } else if (currentPage <= 3) {
                        pageNum = i + 1
                      } else if (currentPage >= totalPages - 2) {
                        pageNum = totalPages - 4 + i
                      } else {
                        pageNum = currentPage - 2 + i
                      }

                      return (
                        <Button
                          key={pageNum}
                          variant={currentPage === pageNum ? "default" : "outline"}
                          size="sm"
                          onClick={() => setCurrentPage(pageNum)}
                          className="w-8 h-8 p-0"
                        >
                          {pageNum}
                        </Button>
                      )
                    })}
                  </div>

                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                    disabled={currentPage === totalPages}
                  >
                    Next
                  </Button>
                </div>
              </div>
            )}
          </>
        )}
      </CardContent>
    </Card>
  )
}
