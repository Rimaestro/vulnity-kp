import { useState } from 'react'
import { 
  X, 
  AlertTriangle, 
  AlertCircle, 
  Info, 
  Shield, 
  Calendar, 
  User, 
  Target, 
  Clock, 
  ExternalLink,
  Copy,
  CheckCircle,
  Edit,
  Trash2
} from 'lucide-react'

import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from '@/components/ui/dialog'
import { Button } from '@/components/ui/button'
import { Badge } from '@/components/ui/badge'
import { Separator } from '@/components/ui/separator'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
import { useToast } from '@/hooks/use-toast'

import type { VulnerabilityItem } from '@/hooks/use-vulnerability-data'

interface VulnerabilityDetailProps {
  vulnerability: VulnerabilityItem | null
  open: boolean
  onClose: () => void
}

export function VulnerabilityDetail({ vulnerability, open, onClose }: VulnerabilityDetailProps) {
  const [activeTab, setActiveTab] = useState('overview')
  const { toast } = useToast()

  if (!vulnerability) return null

  const getSeverityIcon = () => {
    switch (vulnerability.severity) {
      case 'critical':
        return <AlertTriangle className="h-5 w-5 text-red-600" />
      case 'high':
        return <AlertCircle className="h-5 w-5 text-orange-600" />
      case 'medium':
        return <Info className="h-5 w-5 text-yellow-600" />
      case 'low':
        return <Shield className="h-5 w-5 text-blue-600" />
      default:
        return <Shield className="h-5 w-5 text-gray-600" />
    }
  }

  const getSeverityColor = () => {
    switch (vulnerability.severity) {
      case 'critical':
        return 'bg-red-100 text-red-800 border-red-200'
      case 'high':
        return 'bg-orange-100 text-orange-800 border-orange-200'
      case 'medium':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      case 'low':
        return 'bg-blue-100 text-blue-800 border-blue-200'
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const getStatusColor = () => {
    switch (vulnerability.status) {
      case 'open':
        return 'bg-red-100 text-red-800 border-red-200'
      case 'in-progress':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      case 'fixed':
        return 'bg-green-100 text-green-800 border-green-200'
      case 'dismissed':
        return 'bg-gray-100 text-gray-800 border-gray-200'
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const formatType = (type: string) => {
    return type.split('-').map(word => 
      word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ')
  }

  const formatStatus = (status: string) => {
    return status.split('-').map(word => 
      word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ')
  }

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    })
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
    toast({
      title: "Copied to clipboard",
      description: "Text has been copied to your clipboard.",
    })
  }

  const handleStatusChange = (newStatus: string) => {
    // TODO: Implement status change API call
    toast({
      title: "Status Updated",
      description: `Vulnerability status changed to ${formatStatus(newStatus)}.`,
    })
  }

  const handleAssign = () => {
    // TODO: Implement assignment functionality
    toast({
      title: "Assignment",
      description: "Assignment functionality will be available soon.",
    })
  }

  const handleDelete = () => {
    // TODO: Implement delete functionality
    toast({
      title: "Delete",
      description: "Delete functionality will be available soon.",
    })
  }

  return (
    <Dialog open={open} onOpenChange={onClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <div className="flex items-start justify-between">
            <div className="flex items-start space-x-3">
              {getSeverityIcon()}
              <div>
                <DialogTitle className="text-xl">{vulnerability.title}</DialogTitle>
                <DialogDescription className="mt-1">
                  {formatType(vulnerability.type)} vulnerability
                </DialogDescription>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Badge 
                variant="outline" 
                className={`${getSeverityColor()}`}
              >
                {vulnerability.severity.toUpperCase()}
              </Badge>
              <Badge 
                variant="outline" 
                className={`${getStatusColor()}`}
              >
                {formatStatus(vulnerability.status)}
              </Badge>
            </div>
          </div>
        </DialogHeader>

        <Tabs value={activeTab} onValueChange={setActiveTab} className="mt-6">
          <TabsList className="grid w-full grid-cols-4">
            <TabsTrigger value="overview">Overview</TabsTrigger>
            <TabsTrigger value="technical">Technical</TabsTrigger>
            <TabsTrigger value="remediation">Remediation</TabsTrigger>
            <TabsTrigger value="activity">Activity</TabsTrigger>
          </TabsList>

          <TabsContent value="overview" className="space-y-4">
            {/* Basic Information */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Basic Information</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">Target</label>
                    <div className="flex items-center space-x-2 mt-1">
                      <Target className="h-4 w-4 text-muted-foreground" />
                      <span className="font-mono text-sm">{vulnerability.target}</span>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => copyToClipboard(vulnerability.target)}
                      >
                        <Copy className="h-3 w-3" />
                      </Button>
                    </div>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">Vulnerability ID</label>
                    <div className="flex items-center space-x-2 mt-1">
                      <span className="font-mono text-sm">{vulnerability.id}</span>
                      <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => copyToClipboard(vulnerability.id)}
                      >
                        <Copy className="h-3 w-3" />
                      </Button>
                    </div>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">Discovered</label>
                    <div className="flex items-center space-x-2 mt-1">
                      <Calendar className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm">{formatDate(vulnerability.discoveredAt)}</span>
                    </div>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">Last Updated</label>
                    <div className="flex items-center space-x-2 mt-1">
                      <Clock className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm">{formatDate(vulnerability.lastUpdated)}</span>
                    </div>
                  </div>
                </div>

                {vulnerability.assignedTo && (
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">Assigned To</label>
                    <div className="flex items-center space-x-2 mt-1">
                      <User className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm">{vulnerability.assignedTo}</span>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Description */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Description</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm leading-relaxed">{vulnerability.description}</p>
              </CardContent>
            </Card>

            {/* Risk Assessment */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Risk Assessment</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-3 gap-4">
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">Impact</label>
                    <div className="mt-1">
                      <Badge variant="outline" className="capitalize">
                        {vulnerability.impact}
                      </Badge>
                    </div>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">Exploitability</label>
                    <div className="mt-1">
                      <Badge variant="outline" className="capitalize">
                        {vulnerability.exploitability}
                      </Badge>
                    </div>
                  </div>
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">Fix Complexity</label>
                    <div className="mt-1">
                      <Badge variant="outline" className="capitalize">
                        {vulnerability.fixComplexity}
                      </Badge>
                    </div>
                  </div>
                </div>

                {vulnerability.cvssScore && (
                  <div className="mt-4">
                    <label className="text-sm font-medium text-muted-foreground">CVSS Score</label>
                    <div className="mt-1">
                      <Badge variant="outline" className="text-lg px-3 py-1">
                        {vulnerability.cvssScore}/10
                      </Badge>
                    </div>
                  </div>
                )}

                {vulnerability.estimatedFixTime && (
                  <div className="mt-4">
                    <label className="text-sm font-medium text-muted-foreground">Estimated Fix Time</label>
                    <div className="flex items-center space-x-2 mt-1">
                      <Clock className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm">{vulnerability.estimatedFixTime} hours</span>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Tags */}
            {vulnerability.tags && vulnerability.tags.length > 0 && (
              <Card>
                <CardHeader>
                  <CardTitle className="text-lg">Tags</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="flex flex-wrap gap-2">
                    {vulnerability.tags.map((tag, index) => (
                      <Badge key={index} variant="secondary">
                        {tag}
                      </Badge>
                    ))}
                  </div>
                </CardContent>
              </Card>
            )}
          </TabsContent>

          <TabsContent value="technical" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Technical Details</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  {vulnerability.cve && (
                    <div>
                      <label className="text-sm font-medium text-muted-foreground">CVE ID</label>
                      <div className="flex items-center space-x-2 mt-1">
                        <span className="font-mono text-sm">{vulnerability.cve}</span>
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={() => window.open(`https://cve.mitre.org/cgi-bin/cvename.cgi?name=${vulnerability.cve}`, '_blank')}
                        >
                          <ExternalLink className="h-3 w-3" />
                        </Button>
                      </div>
                    </div>
                  )}
                  
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">Vulnerability Type</label>
                    <p className="text-sm mt-1">{formatType(vulnerability.type)}</p>
                  </div>

                  <div>
                    <label className="text-sm font-medium text-muted-foreground">Affected Endpoint</label>
                    <p className="text-sm font-mono mt-1 bg-muted p-2 rounded">
                      {vulnerability.target}
                    </p>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="remediation" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Remediation Steps</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <p className="text-sm text-muted-foreground">
                    Detailed remediation steps will be available based on the vulnerability type and context.
                  </p>
                  
                  <div className="bg-muted p-4 rounded-lg">
                    <h4 className="font-medium mb-2">General Recommendations:</h4>
                    <ul className="text-sm space-y-1 list-disc list-inside">
                      <li>Review and validate all user inputs</li>
                      <li>Implement proper authentication and authorization</li>
                      <li>Use parameterized queries for database operations</li>
                      <li>Apply security headers and content security policies</li>
                      <li>Regular security testing and code reviews</li>
                    </ul>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="activity" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Activity Timeline</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-start space-x-3">
                    <div className="w-2 h-2 bg-blue-500 rounded-full mt-2"></div>
                    <div>
                      <p className="text-sm font-medium">Vulnerability Discovered</p>
                      <p className="text-xs text-muted-foreground">
                        {formatDate(vulnerability.discoveredAt)}
                      </p>
                    </div>
                  </div>
                  
                  {vulnerability.assignedTo && (
                    <div className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-yellow-500 rounded-full mt-2"></div>
                      <div>
                        <p className="text-sm font-medium">Assigned to {vulnerability.assignedTo}</p>
                        <p className="text-xs text-muted-foreground">
                          {formatDate(vulnerability.lastUpdated)}
                        </p>
                      </div>
                    </div>
                  )}

                  {vulnerability.status === 'fixed' && (
                    <div className="flex items-start space-x-3">
                      <div className="w-2 h-2 bg-green-500 rounded-full mt-2"></div>
                      <div>
                        <p className="text-sm font-medium">Vulnerability Fixed</p>
                        <p className="text-xs text-muted-foreground">
                          {formatDate(vulnerability.lastUpdated)}
                        </p>
                      </div>
                    </div>
                  )}
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Action Buttons */}
        <div className="flex items-center justify-between pt-4 border-t">
          <div className="flex items-center space-x-2">
            <Button variant="outline" size="sm" onClick={handleAssign}>
              <User className="h-4 w-4 mr-2" />
              Assign
            </Button>
            <Button variant="outline" size="sm" onClick={handleDelete}>
              <Trash2 className="h-4 w-4 mr-2" />
              Delete
            </Button>
          </div>
          
          <div className="flex items-center space-x-2">
            {vulnerability.status !== 'fixed' && (
              <Button 
                size="sm" 
                onClick={() => handleStatusChange('fixed')}
                className="bg-green-600 hover:bg-green-700"
              >
                <CheckCircle className="h-4 w-4 mr-2" />
                Mark as Fixed
              </Button>
            )}
            <Button variant="outline" onClick={onClose}>
              Close
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  )
}
