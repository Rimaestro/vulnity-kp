import { motion } from 'framer-motion'
import { 
  AlertTriangle, 
  AlertCircle, 
  Info, 
  Shield, 
  Clock, 
  User, 
  Calendar,
  Target,
  ExternalLink,
  ChevronRight
} from 'lucide-react'

import { Card, CardContent } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'

import type { VulnerabilityItem } from '@/hooks/use-vulnerability-data'

interface VulnerabilityCardProps {
  vulnerability: VulnerabilityItem
  onClick: (vulnerability: VulnerabilityItem) => void
  index?: number
}

export function VulnerabilityCard({ vulnerability, onClick, index = 0 }: VulnerabilityCardProps) {
  const getSeverityIcon = () => {
    switch (vulnerability.severity) {
      case 'critical':
        return <AlertTriangle className="h-4 w-4 text-red-600" />
      case 'high':
        return <AlertCircle className="h-4 w-4 text-orange-600" />
      case 'medium':
        return <Info className="h-4 w-4 text-yellow-600" />
      case 'low':
        return <Shield className="h-4 w-4 text-blue-600" />
      default:
        return <Shield className="h-4 w-4 text-gray-600" />
    }
  }

  const getSeverityColor = () => {
    switch (vulnerability.severity) {
      case 'critical':
        return 'bg-red-600 hover:bg-red-700 text-white'
      case 'high':
        return 'bg-orange-600 hover:bg-orange-700 text-white'
      case 'medium':
        return 'border-yellow-500 text-yellow-600'
      case 'low':
        return 'text-blue-600'
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const getStatusColor = () => {
    switch (vulnerability.status) {
      case 'open':
        return 'bg-red-100 text-red-800 border-red-200'
      case 'in-progress':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200'
      case 'fixed':
        return 'bg-green-100 text-green-800 border-green-200'
      case 'dismissed':
        return 'bg-gray-100 text-gray-800 border-gray-200'
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200'
    }
  }

  const formatType = (type: string) => {
    return type.split('-').map(word => 
      word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ')
  }

  const formatStatus = (status: string) => {
    return status.split('-').map(word => 
      word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ')
  }

  const formatDate = (date: Date) => {
    return new Intl.RelativeTimeFormat('en', { numeric: 'auto' }).format(
      Math.ceil((date.getTime() - Date.now()) / (1000 * 60 * 60 * 24)),
      'day'
    )
  }

  const getCardBorderColor = () => {
    switch (vulnerability.severity) {
      case 'critical':
        return 'border-l-red-500'
      case 'high':
        return 'border-l-orange-500'
      case 'medium':
        return 'border-l-yellow-500'
      case 'low':
        return 'border-l-blue-500'
      default:
        return 'border-l-gray-500'
    }
  }

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.3, delay: index * 0.05 }}
    >
      <Card 
        className={`cursor-pointer hover:shadow-md transition-all duration-200 border-l-4 ${getCardBorderColor()} hover:bg-muted/30`}
        onClick={() => onClick(vulnerability)}
      >
        <CardContent className="p-4">
          <div className="flex items-start justify-between">
            <div className="flex-1 min-w-0">
              {/* Header */}
              <div className="flex items-start justify-between mb-2">
                <div className="flex items-center space-x-2 min-w-0 flex-1">
                  {getSeverityIcon()}
                  <h3 className="font-semibold text-sm truncate">
                    {vulnerability.title}
                  </h3>
                </div>
                <ChevronRight className="h-4 w-4 text-muted-foreground flex-shrink-0 ml-2" />
              </div>

              {/* Badges */}
              <div className="flex items-center space-x-2 mb-3">
                <Badge 
                  variant="outline" 
                  className={`text-xs ${getSeverityColor()}`}
                >
                  {vulnerability.severity.toUpperCase()}
                </Badge>
                <Badge 
                  variant="outline" 
                  className={`text-xs ${getStatusColor()}`}
                >
                  {formatStatus(vulnerability.status)}
                </Badge>
                <Badge variant="secondary" className="text-xs">
                  {formatType(vulnerability.type)}
                </Badge>
                {vulnerability.cvssScore && (
                  <Badge variant="outline" className="text-xs">
                    CVSS {vulnerability.cvssScore}
                  </Badge>
                )}
              </div>

              {/* Description */}
              <p className="text-sm text-muted-foreground mb-3 line-clamp-2">
                {vulnerability.description}
              </p>

              {/* Target */}
              <div className="flex items-center space-x-1 mb-3">
                <Target className="h-3 w-3 text-muted-foreground" />
                <span className="text-xs text-muted-foreground font-mono">
                  {vulnerability.target}
                </span>
              </div>

              {/* Metadata */}
              <div className="flex items-center justify-between text-xs text-muted-foreground">
                <div className="flex items-center space-x-4">
                  <div className="flex items-center space-x-1">
                    <Calendar className="h-3 w-3" />
                    <span>Discovered {formatDate(vulnerability.discoveredAt)}</span>
                  </div>
                  {vulnerability.assignedTo && (
                    <div className="flex items-center space-x-1">
                      <User className="h-3 w-3" />
                      <span>{vulnerability.assignedTo}</span>
                    </div>
                  )}
                </div>
                <div className="flex items-center space-x-2">
                  {vulnerability.estimatedFixTime && (
                    <div className="flex items-center space-x-1">
                      <Clock className="h-3 w-3" />
                      <span>{vulnerability.estimatedFixTime}h</span>
                    </div>
                  )}
                  <div className="flex items-center space-x-1">
                    <span className="capitalize">{vulnerability.impact}</span>
                    <span>impact</span>
                  </div>
                </div>
              </div>

              {/* Tags */}
              {vulnerability.tags && vulnerability.tags.length > 0 && (
                <div className="flex items-center space-x-1 mt-2">
                  {vulnerability.tags.slice(0, 3).map((tag, tagIndex) => (
                    <Badge 
                      key={tagIndex} 
                      variant="secondary" 
                      className="text-xs px-1 py-0"
                    >
                      {tag}
                    </Badge>
                  ))}
                  {vulnerability.tags.length > 3 && (
                    <Badge variant="secondary" className="text-xs px-1 py-0">
                      +{vulnerability.tags.length - 3}
                    </Badge>
                  )}
                </div>
              )}
            </div>
          </div>
        </CardContent>
      </Card>
    </motion.div>
  )
}
