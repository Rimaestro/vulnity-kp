import { motion } from 'framer-motion'
import { 
  Shield, 
  AlertTriangle, 
  AlertCircle, 
  Info, 
  TrendingUp, 
  TrendingDown, 
  Minus,
  Clock,
  CheckCircle,
  Target
} from 'lucide-react'

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Progress } from '@/components/ui/progress'
import { Skeleton } from '@/components/ui/skeleton'

import type { VulnerabilityStats as StatsType, RiskMetrics } from '@/hooks/use-vulnerability-data'

interface VulnerabilityStatsProps {
  stats: StatsType | null
  riskMetrics: RiskMetrics | null
  loading: boolean
}

export function VulnerabilityStats({ stats, riskMetrics, loading }: VulnerabilityStatsProps) {
  if (loading) {
    return (
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-6">
        {Array.from({ length: 8 }).map((_, i) => (
          <Card key={i}>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <Skeleton className="h-4 w-20" />
              <Skeleton className="h-4 w-4" />
            </CardHeader>
            <CardContent>
              <Skeleton className="h-8 w-16 mb-2" />
              <Skeleton className="h-3 w-24" />
            </CardContent>
          </Card>
        ))}
      </div>
    )
  }

  if (!stats || !riskMetrics) {
    return null
  }

  const severityCards = [
    {
      title: "Critical",
      value: stats.critical,
      icon: AlertTriangle,
      color: "text-red-600",
    },
    {
      title: "High",
      value: stats.high,
      icon: AlertCircle,
      color: "text-orange-600",
    },
    {
      title: "Medium",
      value: stats.medium,
      icon: Info,
      color: "text-yellow-600",
    },
    {
      title: "Low",
      value: stats.low,
      icon: Shield,
      color: "text-blue-600",
    },
  ]

  const statusCards = [
    {
      title: "Open",
      value: stats.open,
      icon: Target,
      color: "text-red-600",
      description: "Unresolved vulnerabilities",
    },
    {
      title: "In Progress",
      value: stats.inProgress,
      icon: Clock,
      color: "text-yellow-600",
      description: "Being worked on",
    },
    {
      title: "Fixed",
      value: stats.fixed,
      icon: CheckCircle,
      color: "text-green-600",
      description: "Resolved vulnerabilities",
    },
    {
      title: "Total",
      value: stats.total,
      icon: Shield,
      color: "text-blue-600",
      description: "All vulnerabilities",
    },
  ]

  const getTrendIcon = () => {
    switch (riskMetrics.trendDirection) {
      case 'up':
        return <TrendingUp className="h-4 w-4 text-red-600" />
      case 'down':
        return <TrendingDown className="h-4 w-4 text-green-600" />
      default:
        return <Minus className="h-4 w-4 text-gray-600" />
    }
  }

  const getTrendColor = () => {
    switch (riskMetrics.trendDirection) {
      case 'up':
        return 'text-red-600'
      case 'down':
        return 'text-green-600'
      default:
        return 'text-gray-600'
    }
  }

  const getRiskScoreColor = (score: number) => {
    if (score >= 8) return 'text-red-600'
    if (score >= 6) return 'text-orange-600'
    if (score >= 4) return 'text-yellow-600'
    return 'text-green-600'
  }

  const getRiskScoreBg = (score: number) => {
    // Menggunakan background konsisten untuk semua cards
    return ''
  }
  
  const getRiskScoreBadgeClass = (score: number) => {
    if (score >= 8) return 'bg-red-600 hover:bg-red-700 text-white'
    if (score >= 6) return 'bg-orange-600 hover:bg-orange-700 text-white'
    if (score >= 4) return 'border-yellow-500 text-yellow-600'
    return 'text-blue-600'
  }

  return (
    <div className="space-y-6 mb-6">
      {/* Severity Breakdown */}
      <div>
        <h3 className="text-lg font-semibold mb-4">Vulnerability Severity</h3>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          {severityCards.map((card, index) => (
            <motion.div
              key={card.title}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: index * 0.1 }}
            >
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">
                    {card.title}
                  </CardTitle>
                  <card.icon className={`h-4 w-4 ${card.color}`} />
                </CardHeader>
                <CardContent>
                  <div className={`text-2xl font-bold ${card.color}`}>
                    {card.value}
                  </div>
                  <p className="text-xs text-muted-foreground">
                    {((card.value / stats.total) * 100).toFixed(1)}% of total
                  </p>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </div>
      </div>

      {/* Status and Metrics */}
      <div>
        <h3 className="text-lg font-semibold mb-4">Status & Risk Metrics</h3>
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          {statusCards.map((card, index) => (
            <motion.div
              key={card.title}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.3, delay: index * 0.1 }}
            >
              <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium">
                    {card.title}
                  </CardTitle>
                  <card.icon className={`h-4 w-4 ${card.color}`} />
                </CardHeader>
                <CardContent>
                  <div className={`text-2xl font-bold ${card.color}`}>
                    {card.value}
                  </div>
                  <p className="text-xs text-muted-foreground">
                    {card.description}
                  </p>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </div>
      </div>

      {/* Risk Metrics */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3, delay: 0.4 }}
        >
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Risk Score</CardTitle>
              <AlertTriangle className={`h-4 w-4 ${getRiskScoreColor(riskMetrics.riskScore)}`} />
            </CardHeader>
            <CardContent>
              <div className={`text-2xl font-bold ${getRiskScoreColor(riskMetrics.riskScore)}`}>
                {riskMetrics.riskScore.toFixed(1)}/10
              </div>
              <div className="mt-2">
                <Progress 
                  value={(riskMetrics.riskScore / 10) * 100} 
                  className="h-2"
                />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3, delay: 0.5 }}
        >
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">SLA Compliance</CardTitle>
              <CheckCircle className="h-4 w-4 text-green-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-600">
                {riskMetrics.slaCompliance.toFixed(1)}%
              </div>
              <div className="mt-2">
                <Progress 
                  value={riskMetrics.slaCompliance} 
                  className="h-2"
                />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3, delay: 0.6 }}
        >
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Avg Fix Time</CardTitle>
              <Clock className="h-4 w-4 text-blue-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-blue-600">
                {riskMetrics.averageFixTime.toFixed(1)}d
              </div>
              <p className="text-xs text-muted-foreground">
                Average resolution time
              </p>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.3, delay: 0.7 }}
        >
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Trend</CardTitle>
              {getTrendIcon()}
            </CardHeader>
            <CardContent>
              <div className={`text-2xl font-bold ${getTrendColor()}`}>
                {riskMetrics.trendPercentage.toFixed(1)}%
              </div>
              <p className="text-xs text-muted-foreground">
                {riskMetrics.trendDirection === 'up' ? 'Increase' : 
                 riskMetrics.trendDirection === 'down' ? 'Decrease' : 'Stable'}
              </p>
            </CardContent>
          </Card>
        </motion.div>
      </div>
    </div>
  )
}
