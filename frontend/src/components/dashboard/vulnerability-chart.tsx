import * as React from "react"
import { PieChart, Pie, Cell, ResponsiveContainer, Tooltip } from "recharts"
import { motion } from "framer-motion"
import { TrendingUp, TrendingDown, Minus, PieChart as PieChartIcon } from "lucide-react"

import { cn } from "@/lib/utils"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Skeleton } from "@/components/ui/skeleton"

import { useVulnerabilityData, type VulnerabilityStats } from "@/hooks/use-vulnerability-data"

interface VulnerabilityChartProps {
  className?: string
  onSeverityClick?: (severity: string) => void
  showTrend?: boolean
}

const severityConfig = {
  critical: {
    label: "Critical",
    color: "hsl(var(--destructive))",
    bgColor: "bg-red-500",
    textColor: "text-red-500",
    lightBg: "bg-red-50 dark:bg-red-950",
    lightBorder: "border-red-200 dark:border-red-800"
  },
  high: {
    label: "High", 
    color: "hsl(var(--orange-500))",
    bgColor: "bg-orange-500",
    textColor: "text-orange-500",
    lightBg: "bg-orange-50 dark:bg-orange-950",
    lightBorder: "border-orange-200 dark:border-orange-800"
  },
  medium: {
    label: "Medium",
    color: "hsl(var(--yellow-500))", 
    bgColor: "bg-yellow-500",
    textColor: "text-yellow-500",
    lightBg: "bg-yellow-50 dark:bg-yellow-950",
    lightBorder: "border-yellow-200 dark:border-yellow-800"
  },
  low: {
    label: "Low",
    color: "hsl(var(--green-500))",
    bgColor: "bg-green-500", 
    textColor: "text-green-500",
    lightBg: "bg-green-50 dark:bg-green-950",
    lightBorder: "border-green-200 dark:border-green-800"
  }
} as const

function VulnerabilityChart({ 
  className, 
  onSeverityClick,
  showTrend = true 
}: VulnerabilityChartProps) {
  const { stats, riskMetrics, loading, error } = useVulnerabilityData()
  const [activeIndex, setActiveIndex] = React.useState<number | null>(null)
  const [hoveredSeverity, setHoveredSeverity] = React.useState<string | null>(null)

  if (loading) {
    return (
      <Card className={cn("hover-lift", className)}>
        <CardHeader>
          <Skeleton className="h-5 w-48" />
          <Skeleton className="h-4 w-64" />
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center h-64">
            <Skeleton className="h-48 w-48 rounded-full" />
          </div>
          <div className="grid grid-cols-2 gap-4 mt-6">
            {Array.from({ length: 4 }).map((_, i) => (
              <div key={i} className="flex items-center space-x-2">
                <Skeleton className="h-3 w-3 rounded-full" />
                <Skeleton className="h-4 w-16" />
                <Skeleton className="h-4 w-8" />
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    )
  }

  if (error || !stats) {
    return (
      <Card className={cn("hover-lift", className)}>
        <CardHeader>
          <CardTitle className="flex items-center text-destructive">
            <PieChartIcon className="h-5 w-5 mr-2" />
            Vulnerability Analysis
          </CardTitle>
          <CardDescription>Failed to load vulnerability data</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-center h-64 text-muted-foreground">
            <div className="text-center">
              <p className="text-sm">Unable to load chart data</p>
              <Button variant="ghost" size="sm" className="mt-2">
                Retry
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    )
  }

  // Prepare chart data
  const chartData = [
    { name: "critical", value: stats.critical, label: "Critical" },
    { name: "high", value: stats.high, label: "High" },
    { name: "medium", value: stats.medium, label: "Medium" },
    { name: "low", value: stats.low, label: "Low" }
  ].filter(item => item.value > 0) // Only show non-zero values

  const total = stats.total

  // Custom tooltip component
  const CustomTooltip = ({ active, payload }: any) => {
    if (active && payload && payload.length) {
      const data = payload[0]
      const severity = data.name
      const config = severityConfig[severity as keyof typeof severityConfig]
      const percentage = total > 0 ? Math.round((data.value / total) * 100) : 0

      return (
        <div className="bg-background border border-border rounded-lg shadow-lg p-3">
          <div className="flex items-center space-x-2 mb-1">
            <div className={`w-3 h-3 rounded-full ${config.bgColor}`} />
            <span className="font-medium text-sm">{config.label}</span>
          </div>
          <div className="text-sm text-muted-foreground">
            <div>{data.value} vulnerabilities</div>
            <div>{percentage}% of total</div>
          </div>
        </div>
      )
    }
    return null
  }

  const handlePieClick = (data: any, index: number) => {
    if (onSeverityClick) {
      onSeverityClick(data.name)
    }
  }

  const handleMouseEnter = (data: any, index: number) => {
    setActiveIndex(index)
    setHoveredSeverity(data.name)
  }

  const handleMouseLeave = () => {
    setActiveIndex(null)
    setHoveredSeverity(null)
  }

  const getTrendIcon = () => {
    if (!riskMetrics || !showTrend) return null
    
    switch (riskMetrics.trendDirection) {
      case "up":
        return <TrendingUp className="h-4 w-4 text-red-500" />
      case "down":
        return <TrendingDown className="h-4 w-4 text-green-500" />
      default:
        return <Minus className="h-4 w-4 text-muted-foreground" />
    }
  }

  const getTrendText = () => {
    if (!riskMetrics || !showTrend) return ""
    
    const direction = riskMetrics.trendDirection === "up" ? "increase" : 
                     riskMetrics.trendDirection === "down" ? "decrease" : "stable"
    const percentage = riskMetrics.trendPercentage > 0 ? `${riskMetrics.trendPercentage.toFixed(1)}%` : ""
    
    return `${percentage} ${direction} from last week`
  }

  return (
    <Card className={cn("hover-lift", className)}>
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <div className="flex items-center">
            <PieChartIcon className="h-5 w-5 mr-2" />
            Vulnerability Analysis
          </div>
          {showTrend && riskMetrics && (
            <div className="flex items-center space-x-1 text-xs text-muted-foreground">
              {getTrendIcon()}
              <span>{getTrendText()}</span>
            </div>
          )}
        </CardTitle>
        <CardDescription>
          Distribution of vulnerabilities by severity level
        </CardDescription>
      </CardHeader>
      <CardContent>
        {total === 0 ? (
          <div className="flex items-center justify-center h-64">
            <div className="text-center">
              <div className="w-16 h-16 bg-green-100 dark:bg-green-900/20 rounded-full flex items-center justify-center mx-auto mb-4">
                <PieChartIcon className="h-8 w-8 text-green-600 dark:text-green-400" />
              </div>
              <p className="text-sm font-medium">No vulnerabilities found</p>
              <p className="text-xs text-muted-foreground mt-1">
                Your system appears to be secure
              </p>
            </div>
          </div>
        ) : (
          <div className="space-y-6">
            {/* Chart */}
            <div className="flex items-center justify-center">
              <div className="relative">
                <ResponsiveContainer width={240} height={240}>
                  <PieChart>
                    <Pie
                      data={chartData}
                      cx="50%"
                      cy="50%"
                      innerRadius={60}
                      outerRadius={100}
                      paddingAngle={2}
                      dataKey="value"
                      onClick={handlePieClick}
                      onMouseEnter={handleMouseEnter}
                      onMouseLeave={handleMouseLeave}
                      className="cursor-pointer"
                    >
                      {chartData.map((entry, index) => {
                        const config = severityConfig[entry.name as keyof typeof severityConfig]
                        const isActive = activeIndex === index
                        return (
                          <Cell
                            key={`cell-${index}`}
                            fill={config.color}
                            stroke={isActive ? "hsl(var(--background))" : "transparent"}
                            strokeWidth={isActive ? 3 : 0}
                            style={{
                              filter: isActive ? "brightness(1.1)" : "none",
                              transform: isActive ? "scale(1.05)" : "scale(1)",
                              transformOrigin: "center",
                              transition: "all 0.2s ease-in-out"
                            }}
                          />
                        )
                      })}
                    </Pie>
                    <Tooltip content={<CustomTooltip />} />
                  </PieChart>
                </ResponsiveContainer>
                
                {/* Center text */}
                <div className="absolute inset-0 flex items-center justify-center">
                  <div className="text-center">
                    <div className="text-2xl font-bold">{total}</div>
                    <div className="text-xs text-muted-foreground">Total</div>
                  </div>
                </div>
              </div>
            </div>

            {/* Legend */}
            <div className="grid grid-cols-2 gap-3">
              {Object.entries(severityConfig).map(([severity, config]) => {
                const count = stats[severity as keyof VulnerabilityStats] as number
                const percentage = total > 0 ? Math.round((count / total) * 100) : 0
                const isHovered = hoveredSeverity === severity
                
                return (
                  <motion.div
                    key={severity}
                    className={cn(
                      "flex items-center justify-between p-3 rounded-lg border transition-all duration-200 cursor-pointer",
                      isHovered ? `${config.lightBg} ${config.lightBorder}` : "hover:bg-muted/50",
                      count === 0 && "opacity-50"
                    )}
                    onClick={() => onSeverityClick?.(severity)}
                    onMouseEnter={() => setHoveredSeverity(severity)}
                    onMouseLeave={() => setHoveredSeverity(null)}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <div className="flex items-center space-x-2">
                      <div className={`w-3 h-3 rounded-full ${config.bgColor}`} />
                      <span className="text-sm font-medium">{config.label}</span>
                    </div>
                    <div className="flex items-center space-x-2">
                      <span className={`text-sm font-bold ${config.textColor}`}>
                        {count}
                      </span>
                      {total > 0 && (
                        <span className="text-xs text-muted-foreground">
                          ({percentage}%)
                        </span>
                      )}
                    </div>
                  </motion.div>
                )
              })}
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  )
}

export { VulnerabilityChart }
export type { VulnerabilityChartProps }
